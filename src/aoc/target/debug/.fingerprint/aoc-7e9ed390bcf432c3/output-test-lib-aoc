{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"parseme\\mod.rs","byte_start":5827,"byte_end":5863,"line_start":153,"line_end":153,"column_start":17,"column_end":53,"is_primary":true,"text":[{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":17,"highlight_end":53}],"label":"cannot infer type for struct `Vec<Parser>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":5462,"byte_end":5492,"line_start":144,"line_end":144,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":6449,"byte_end":6479,"line_start":166,"line_end":166,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":4337,"byte_end":4367,"line_start":124,"line_end":124,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":6240,"byte_end":6270,"line_start":162,"line_end":162,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":4971,"byte_end":5001,"line_start":136,"line_end":136,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":4546,"byte_end":4576,"line_start":128,"line_end":128,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":6784,"byte_end":6815,"line_start":177,"line_end":177,"column_start":17,"column_end":48,"is_primary":false,"text":[{"text":"                parse!(%rule rules $($rules)*);","highlight_start":17,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"parseme\\mod.rs","byte_start":6953,"byte_end":7246,"line_start":190,"line_end":202,"column_start":22,"column_end":10,"is_primary":false,"text":[{"text":"        let parser = parse!{","highlight_start":22,"highlight_end":29},{"text":"            \"Hello\"","highlight_start":1,"highlight_end":20},{"text":"            word name","highlight_start":1,"highlight_end":22},{"text":"            int age_min nospace","highlight_start":1,"highlight_end":32},{"text":"            \"-\" nospace","highlight_start":1,"highlight_end":24},{"text":"            int age_max","highlight_start":1,"highlight_end":24},{"text":"            custom mask (char::is_alphanumeric)","highlight_start":1,"highlight_end":48},{"text":"            either id {","highlight_start":1,"highlight_end":24},{"text":"                word name","highlight_start":1,"highlight_end":26},{"text":"            } or {","highlight_start":1,"highlight_end":19},{"text":"                int id","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        };","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"parse!","def_site_span":{"file_name":"parseme\\mod.rs","byte_start":4136,"byte_end":6870,"line_start":121,"line_end":182,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! parse {","highlight_start":1,"highlight_end":21},{"text":"    (% rule $rules:ident $constant:literal nospace $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), false));","highlight_start":1,"highlight_end":84},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident $constant:literal $($rest: tt)*) => { // constant rule","highlight_start":1,"highlight_end":80},{"text":"        $rules.push($crate::parseme::ParseRule::Constant($constant.into(), true));","highlight_start":1,"highlight_end":83},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident nospace $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":83},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), false));","highlight_start":1,"highlight_end":88},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident word $name:ident $($rest: tt)*) => { // word rule","highlight_start":1,"highlight_end":75},{"text":"        $rules.push($crate::parseme::ParseRule::Word(stringify!($name).into(), true));","highlight_start":1,"highlight_end":87},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) nospace $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":96},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), false));","highlight_start":1,"highlight_end":108},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident custom $name:ident ($fn:expr) $($rest: tt)*) => { // cond rule","highlight_start":1,"highlight_end":88},{"text":"        $rules.push($crate::parseme::ParseRule::Condition(stringify!($name).into(), Box::new($fn), true));","highlight_start":1,"highlight_end":107},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident either $name:ident {$($a: tt)*} or {$($b: tt)*} $($rest: tt)*) => {","highlight_start":1,"highlight_end":93},{"text":"        let values = Vec::new();","highlight_start":1,"highlight_end":33},{"text":"        parse!(%rule values $($a)*);","highlight_start":1,"highlight_end":37},{"text":"        parse!(%rule values $($b)*);","highlight_start":1,"highlight_end":37},{"text":"        $rules.push(","highlight_start":1,"highlight_end":21},{"text":"            $crate::parseme::ParseRule::Either(","highlight_start":1,"highlight_end":48},{"text":"                stringify!($name).into(),","highlight_start":1,"highlight_end":42},{"text":"                Vec::<$crate::parseme::Parser>::from(","highlight_start":1,"highlight_end":54},{"text":"                    values.into_iter().map(|x| $crate::parseme::Parser {rules: Vec::from([x])}).collect()","highlight_start":1,"highlight_end":106},{"text":"                )","highlight_start":1,"highlight_end":18},{"text":"            )","highlight_start":1,"highlight_end":14},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident nospace $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":81},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), false));","highlight_start":1,"highlight_end":91},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident int $name:ident $($rest: tt)*) => { // int rule","highlight_start":1,"highlight_end":73},{"text":"        $rules.push($crate::parseme::ParseRule::Integer(stringify!($name).into(), true));","highlight_start":1,"highlight_end":90},{"text":"        parse!(%rule $rules $($rest)*)","highlight_start":1,"highlight_end":39},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    (% rule $rules:ident) => {};","highlight_start":1,"highlight_end":33},{"text":"    (% rule $rule:tt $($rest: tt)*) => {compile_error!(format!(\"Unknown rule {}\", $rule))};","highlight_start":1,"highlight_end":92},{"text":"    // main rule","highlight_start":1,"highlight_end":17},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        $($rules: tt)*","highlight_start":1,"highlight_end":23},{"text":"    } => {","highlight_start":1,"highlight_end":11},{"text":"        $crate::parseme::Parser {","highlight_start":1,"highlight_end":34},{"text":"            rules: {","highlight_start":1,"highlight_end":21},{"text":"                let mut rules = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"                parse!(%rule rules $($rules)*);","highlight_start":1,"highlight_end":48},{"text":"                rules","highlight_start":1,"highlight_end":22},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"cannot satisfy `Vec<Parser>: From<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `from`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mparseme\\mod.rs:153:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                Vec::<$crate::parseme::Parser>::from(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for struct `Vec<Parser>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        let parser = parse!{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m______________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"Hello\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            word name\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            int age_min nospace\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: cannot satisfy `Vec<Parser>: From<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required by `from`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0283`.\u001b[0m\n"}
